type AssistantMessage = record {
  content : opt text;
  tool_calls : vec ToolCall;
};
type ChatMessage = variant {
  tool : record { content : text; tool_call_id : text };
  user : record { content : text };
  assistant : AssistantMessage;
  system : record { content : text };
};
type FunctionCall = record { name : text; arguments : vec ToolCallArgument };
type Result = variant { Ok; Err : text };
type SavedAccount = record {
  alias : text;
  owner : principal;
  subaccount : opt blob;
};
type ToolCall = record { id : text; function : FunctionCall };
type ToolCallArgument = record { value : text; name : text };
service : {
  copilot_chat : (vec ChatMessage) -> (text);
  list_accounts : () -> (vec SavedAccount) query;
  save_account : (text, text, opt blob) -> (Result);
}
